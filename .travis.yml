sudo: required
language: python
services:
  - docker
env:
  global:
    - DOCKER_REPO=order-backend-rust
    - EB_REGION="ap-northeast-2"
    - AWS_ACCOUNT_ID: 410450153592
    - AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY
    - AWS_SECRET_ACCESS_KEY: $AWS_SECRET_KEY
    - CACHE_FOLDER=$HOME/docker-images
    - CACHE_FILE=${CACHE_FOLDER}/${DOCKER_REPO}-${TRAVIS_COMMIT}.tgz
    - IMAGE=410450153592.dkr.ecr.ap-northeast-2.amazonaws.com/base
jobs:
  include:
    - stage: build
      script:
        - mkdir -p zip
        - cd zip
        - cp -r ../scripts ./
        - cp -r ../appspec.yml ./
        - cp -r  ../env-example ./.env
        - zip -r api.zip . # node-koa-server 라는 이름으로 zip 파일 생성
        - cd ../
        - mkdir -p deploy # deploy 라는 디렉터리를 만듬
        - mv zip/api.zip deploy/api.zip
    - stage: pull base
      script:
        - docker pull ${IMAGE}
        - mkdir -p ${CACHE_FOLDER}
        - docker save ${IMAGE} | gzip -c > ${CACHE_FILE}
    - stage: push
      script:
        - ls -la ${CACHE_FOLDER}
        - if [[ -f ${CACHE_FILE} ]]; then docker load -i ${CACHE_FILE}; fi
        - docker images 
        - echo "now you should see your image in the next stage, you can do what you wanted"
cache:
  pip
  bundler: true
  directories:
    - ${CACHE_FOLDER}
before_install:
  - pip install awscli
  - export PATH=$PATH:$HOME/.local/bin
  - aws configure set default.region ${EB_REGION}
  - $(aws ecr get-login --no-include-email)

 

script:
  - docker build -f "cargo-run.Dockerfile" -t order-backend-rust:latest  .
deploy:
  - provider: script
    script: bash docker_push.sh
    on:
      branch: 
        - master
        - docker

  - provider: s3 # AWS S3를 의미
    access_key_id: $AWS_ACCESS_KEY # Travis repo settings에 설정된 값
    secret_access_key: $AWS_SECRET_KEY # Travis repo settings에 설정된 값
    bucket: coffee-deploy-travis # S3에 생성한 버킷
    region: ap-northeast-2
    skip_cleanup: true
    local_dir: deploy # deploy 디렉터리에 있는 파일을 s3로 업로드 하겠다는 의미
    wait-until-deployed: true
    on:
      branch: 
        - master
        - docker
  - provider: codedeploy # AWS CodeDeploy를 의미
    access_key_id: $AWS_ACCESS_KEY # Travis repo settings에 설정된 값
    secret_access_key: $AWS_SECRET_KEY # Travis repo settings에 설정된 값
    bucket: coffee-deploy-travis # AWS CodeDeploy가 다운로드 받은 버킷
    key: api.zip # 해당 버킷에 저장되어 있는 파일 이름
    bundle_type: zip # 버킷에 저장되어 있는 파일의 확장자
    application: coffee # AWS 배포 애플리케이션
    deployment_group: coffee-deploy # AWS 배포 애플리케이션에 만들어져 있는 배포 그룹
    region: ap-northeast-2
    wait-until-deployed: true
    on:
      branch: 
        - master
        - docker 
  